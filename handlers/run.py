from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import Router, F, types
from .database import *
from keyboards.dinemic_kb import make_row_keyboard
from keyboards.static_kb import get_admin_keyboard


routs_kb=['–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è']

router = Router()

class Admin(StatesGroup):
    secret_key=State()
    hours=State()

class Assign_route(StatesGroup):
    ID=State()
    route=State()

class Route_list(StatesGroup):
    route_ID=State()

class User_data(StatesGroup):
    ID=State()
    name=State()
    pf_number=State()



@router.callback_query(F.data == 'reg')
async def registration(callback: types.CallbackQuery, state: FSMContext): 
    await callback.message.answer(f'–û—Ç–ª–∏—á–Ω–æ, –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é‚ö°',reply_markup=make_row_keyboard(register))
    await state.set_state(User_data.ID)
    await callback.answer() #—á–∏—Å—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏

@router.message(User_data.ID,F.text.in_(register))
async def reg_step1(message: Message, state: FSMContext):
    if check_for_id(message.from_user.id) is True:
        await message.answer(f'{user_int[0]}',reply_markup=ReplyKeyboardRemove())
        await state.set_state(User_data.name) #–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ - "–≤—ã–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—Ç"
    else:
        await message.answer(f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n{user_int[2]}',reply_markup=ReplyKeyboardRemove())
        routs = routs_to_come_admin(get_values())
        for rout in routs: await message.answer(f'{routs.index(rout)+1}. {rout[0]}: {rout[1]}')
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å',reply_markup=ReplyKeyboardRemove())
        await state.set_state(Assign_route.route) #–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—Ç"

@router.message(User_data.name,F.text)
async def reg_step1(message: Message, state: FSMContext):
    await state.update_data(user_ID=message.from_user.id,user_name=message.text)
    await message.answer(f'{user_int[1]}')
    await state.set_state(User_data.pf_number) #–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—Ç"

@router.message(User_data.pf_number,F.text)
async def reg_step2(message: Message, state: FSMContext):
    await state.update_data(user_number=message.text)
    await message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',reply_markup=ReplyKeyboardRemove())
    user_data = await state.get_data()
    registration_user(list(user_data.values()))
    await state.clear()

@router.callback_query(F.data == 'assign')
async def call_asign(callback: types.CallbackQuery, state: FSMContext):
    await state.clear() #—á–∏—Å—Ç–∫–∞ –∫–ª–∞—Å—Å–∞
    if check_for_id(callback.message.from_user.id) is False:
        await callback.message.answer(f'{user_int[0]}',reply_markup=ReplyKeyboardRemove())
        await state.set_state(User_data.name) #–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ - "–≤—ã–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—Ç"
    else: 
        await callback.message.answer(f'{user_int[2]}',reply_markup=ReplyKeyboardRemove())
        routs = routs_to_come_admin(get_values())
        for rout in routs: await callback.message.answer(f'{routs.index(rout)+1}. {rout[0]}: {rout[1]}')
        await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å',reply_markup=ReplyKeyboardRemove())
        await state.set_state(Assign_route.route) #–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—Ç"
        await callback.answer() #—á–∏—Å—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
        


@router.message(Assign_route.route,F.text)
async def assign_route(message: Message, state: FSMContext):
    await state.update_data(user_ID=message.from_user.id,route=message.text)
    routs = routs_to_come_admin(get_values())
    apply_route([message.from_user.id, str(routs[int(message.text)-1][0]),str(routs[int(message.text)-1][1])])
    await message.answer(f'–ó–∞–ø–∏—Å—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',reply_markup=ReplyKeyboardRemove())
    await state.clear()

@router.callback_query(F.data == 'my_routs')
async def registration(callback: types.CallbackQuery, state: FSMContext): 
    await state.clear()
    await callback.message.answer(f'–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞‚ö°',reply_markup=make_row_keyboard(routs_kb))
    await state.set_state(Route_list.route_ID)
    await callback.answer() #—á–∏—Å—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏

@router.message(Route_list.route_ID,F.text)
async def reply_route(message: Message, state: FSMContext):
    await message.answer(f'–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',reply_markup=ReplyKeyboardRemove())
    for itr in get_user_routs(message.from_user.id): await message.answer(f'{itr}')
    await state.clear()

@router.callback_query(F.data == 'admin')
async def call_admin(callback: types.CallbackQuery, state: FSMContext):
    await state.clear() #—á–∏—Å—Ç–∫–∞ –∫–ª–∞—Å—Å–∞
    await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',reply_markup=ReplyKeyboardRemove())
    await callback.answer() #—á–∏—Å—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏



@router.message(Admin.secret_key,F.text)
async def try_key(message: Message, state: FSMContext):
    if message.text == key:
        await message.answer(f'–ù–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç—Éüë®‚Äçüíª',reply_markup=get_admin_keyboard())
        await state.clear()
    else: 
        await message.answer(f'–ö–ª—é—á –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æüòî',reply_markup=ReplyKeyboardRemove())
        await state.clear()

@router.callback_query(F.data == 'update')
async def call_update(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(f'üïì–ó–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –º–Ω–µ –æ–ø–æ–≤–µ—â–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?üïì',reply_markup=ReplyKeyboardRemove())
    await state.set_state(Admin.hours) #–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—Ç"
    await callback.answer() #—á–∏—Å—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏

@router.message(Admin.hours,F.text)
async def hours__update(message: Message, state: FSMContext):
    change_time(int(message.text))
    await message.answer(f'üïì–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞ {message.text} —á–∞—Å–æ–≤ –∏ –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞üïì',
                         reply_markup=ReplyKeyboardRemove())
    await state.clear()

@router.callback_query(F.data == 'routs')
async def call__routs(callback: types.CallbackQuery, state: FSMContext):
    for itr in routs_to_come_admin(get_values()):
        await callback.message.answer(f'–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: \n{itr}',reply_markup=ReplyKeyboardRemove())
    await callback.answer() #—á–∏—Å—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
    await state.clear()



    