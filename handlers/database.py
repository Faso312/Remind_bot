import gspread, time
from datetime import datetime


greeting = ['üëã –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ —Å–æ–±—Ä–∞–Ω–∏—è—Ö. –°–æ –º–Ω–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±—Ä–∞–Ω–∏—è –∏ –¥–µ—Ä–∂–∞—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –ß—Ç–æ –º–Ω–µ –¥–ª—è —Ç–µ–±—è —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è? üòä']
reply=['–ü—Ä–∏–≤–µ—Ç! ü§ñ\n–•–æ—á—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Ç–µ–±–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ :','! üìÖüéâ\n–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è','\n–ñ–¥–µ–º –≤—Å—Ç—Ä–µ—á–∏ —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º! ü§ó‚ú®']
user_int=['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—èüìÖüéâ','–í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É','–û—Ç–ª–∏—á–Ω–æ, –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é‚ö°\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 89271234567']
token='6836856781:AAGtxQPztvNP_ClUNMqGHnpwIwWWdcvUNTE'
routs_kb=['–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è']
def_time=6 #–±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è


secret_key = gspread.service_account('Key.json') #–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ json —Ñ–∞–π–ª—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
sh = secret_key.open("Remind_me_bot") #–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ç–∞–∫–∏–º-—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
sh1=sh.get_worksheet(0) #–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
sh2=sh.get_worksheet(1) #–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
sh3=sh.get_worksheet(2) #–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
sh4=sh.get_worksheet(3) #–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ

def on_hold(seconds: int): #–∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏–∑–ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä—É
    retry_after = seconds  #–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–ª–µ __ —Å–µ–∫—É–Ω–¥
    time.sleep(retry_after) 

def check_in_route(phone_number: str, list_ : list): #–≤–æ–∑–≤—Ä–∞—Ç –∑–Ω–∞—á–µ–Ω–∏–π —é–∑–µ—Ä–∞
    return [itr[itr.index(str(phone_number))-4:itr.index(str(phone_number))+1] for itr in list_ if str(phone_number) in itr]

def get_routes() -> list[list]: #–≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç—Ä. "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
    try: return sh4.get_values()[2:] #–≤—ã–≤–æ–¥ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    except gspread.exceptions.APIError:
        on_hold(5)
        return get_routes()

#print(get_routes())
#print(check_in_route(89025553330, get_routes()))
#print(check_in_route(89025553301,get_routes()[0]))

def register_user(user_data: list): #—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        last_row = len(sh3.get_all_values()) + 1 #–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ +1 
        for col in range(1, len(user_data)+1): #–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (1, –¥–ª–∏–Ω–Ω–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤)
            sh3.update_cell(last_row, col, user_data[col-1]) #–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ –≤–≤–æ–¥–∞(–ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–æ–±–æ–¥–Ω–∞—è, —Å—Ç–æ–ª–±–µ—Ü, –∑–Ω–∞—á–µ–Ω–∏–µ)
    except gspread.exceptions.APIError:
        on_hold(30)
        return register_user(user_data)


#register_user(check_in_route(89025553304, get_routes())[0])

def get_users() -> list: #–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    try: return sh3.get_values()[1:] #–≤—ã–≤–æ–¥ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    except gspread.exceptions.APIError:
        on_hold(5)
        return get_users()
    
    
def get_user_data_if_registered(user_id : str) -> list: #–ø–µ–¥–µ—á–∞—á–∞ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ id  –≤ —Å–∏—Å—Ç–µ–º–µ
    try: return sh1.row_values(sh1.find(str(user_id)).row)
    except gspread.exceptions.APIError:
        on_hold(5)
        return get_user_data_if_registered(user_id)
    
def get_candidats() -> list: #–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    try: return sh1.get_all_values()[1:] #–≤—ã–≤–æ–¥ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    except gspread.exceptions.APIError:
        on_hold(5)
        return get_candidats()[1:]
    
def check_for_id(user_id: str): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ —Å–ø–∏—Å–∫–µ
    try:
        if str(user_id) not in sh1.col_values(1): return True #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ id
        else: return False
    except gspread.exceptions.APIError:
        on_hold(30)
        return check_for_id(user_id)

def timestep(timetable: list, def_time: int) -> list: #–ø–æ–ª—É—á–µ–Ω–∏–µ id –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    curent_time=datetime.now().replace(microsecond=0, tzinfo=None) #—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–µ–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
    time_list=[] #–ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    for itr in timetable: 
        route_time = datetime.strptime(itr[2], "%d/%m/%Y %H:%M") #—Å—Ç—Ä–æ–∫—É –≤–æ –≤—Ä–µ–º—è
        dif_dates=curent_time - route_time #–¥–Ω–∏ –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏
        dif_time=int(dif_dates.total_seconds()/60/60) #—á–∞—Å—ã –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏
        if dif_time == -int(def_time): time_list.extend([[itr[1],itr[2],itr[3].split(' ')]])
        elif dif_time == -1: time_list.extend([[itr[1],itr[2],itr[3].split(' ')]])
    return time_list #–≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ id —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º 

def registration_user(user_data: list): #—Ä–µ–≥–∏—Å—Ç—Ä–∞—É–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        last_row = len(sh1.get_all_values()) + 1 #–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ +1 
        for col in range(1, len(user_data)+1): #–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (1, –¥–ª–∏–Ω–Ω–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤)
            sh1.update_cell(last_row, col, user_data[col-1]) #–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ –≤–≤–æ–¥–∞(–ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–æ–±–æ–¥–Ω–∞—è, —Å—Ç–æ–ª–±–µ—Ü, –∑–Ω–∞—á–µ–Ω–∏–µ)
    except gspread.exceptions.APIError:
        on_hold(30)
        return registration_user(user_data)
    
def apply_route(user_data: list): #–∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    try:
        data=f'{str(user_data[1])} {str(user_data[2])}'
        new_value_route=sh2.cell(sh2.find(str(user_data[1])).row,4).value + ' ' + str(user_data[0]) #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ id –≤ —è—á–µ–π–∫—É
        sh2.update_cell(sh2.find(str(user_data[1])).row, 4, str(new_value_route)) #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        new_value_user=sh1.cell(sh1.find(str(user_data[0])).row,4).value + ',' + str(data) #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —è—á–µ–π–∫—É
        sh1.update_cell(sh1.find(str(user_data[0])).row, 4, str(new_value_user)) #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    except gspread.exceptions.APIError:
        on_hold(30)
        return apply_route(user_data)
    except TypeError:
        sh2.update_cell(sh2.find(str(user_data[1])).row, 4, str(user_data[0])) #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        sh1.update_cell(sh1.find(str(user_data[0])).row, 4, str(data)) #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    except AttributeError: return apply_route(user_data)
    
def routs_to_come_admin(timetable: list) -> list: #—Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    routs_to_come_list=[] #–ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    curent_time=datetime.now().replace(microsecond=0, tzinfo=None) #—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–µ–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
    for itr in timetable: 
        route_time = datetime.strptime(itr[2], "%d/%m/%Y %H:%M") #—Å—Ç—Ä–æ–∫—É –≤–æ –≤—Ä–µ–º—è
        dif_dates=curent_time - route_time #–¥–Ω–∏ –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏
        dif_time=int(dif_dates.total_seconds()/60/60) #—á–∞—Å—ã –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏
        if dif_time <0: routs_to_come_list.extend([[itr[1],itr[2]]]) #–≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ id —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    return  routs_to_come_list

def get_user_routs(user_id: str) ->list: #–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try: 
        return set(sh1.cell(sh1.find(str(user_id)).row,4).value.split(','))
    except gspread.exceptions.APIError:
        on_hold(5)
        return get_user_routs(user_id)
    except AttributeError: print(f'Id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')

    






